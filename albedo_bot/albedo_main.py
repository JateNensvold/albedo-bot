
import os
import argparse
import asyncio
import contextlib
import logging
from logging.handlers import RotatingFileHandler

from image_processing.globals import IMAGE_PROCESSING_PORTRAITS

from albedo_bot.bot import AlbedoBot
import albedo_bot.config as config
import albedo_bot.database.migration
from albedo_bot.cogs.utils.mixins.enum_mixin import StrEnum


class RemoveNoise(logging.Filter):
    """
    Remove certain discord noise from logging 
    """

    def __init__(self):
        super().__init__(name='discord.state')

    def filter(self, record):
        if (record.levelname == 'WARNING' and
                'referencing an unknown' in record.msg):
            return False
        return True


@contextlib.contextmanager
def setup_logging():
    """
    Setup discord logging
    """
    try:
        # __enter__
        max_bytes = 32 * 1024 * 1024  # 32 MiB
        logging.getLogger('discord').setLevel(logging.INFO)
        logging.getLogger('discord.http').setLevel(logging.WARNING)
        logging.getLogger('discord.state').addFilter(RemoveNoise())

        log = logging.getLogger()
        log.setLevel(logging.INFO)
        handler = RotatingFileHandler(filename='albedo_bot.log',
                                      encoding='utf-8', mode='w',
                                      maxBytes=max_bytes, backupCount=5)
        date_format = '%Y-%m-%d %H:%M:%S'
        log_format = logging.Formatter(
            '[{asctime}] [{levelname:<7}] {name}: {message}',
            date_format, style='{')
        handler.setFormatter(log_format)
        log.addHandler(handler)

        yield
    finally:
        # __exit__
        handlers = log.handlers[:]
        for handler in handlers:
            handler.close()
            log.removeHandler(handler)


async def run_bot():
    """
    Create and run the the bot
    """

    bot = AlbedoBot()
    await bot.start()


class LaunchChoices(StrEnum):
    """
    The available runtime types for the bot
    """
    run: str = "run"
    init: str = "init"
    drop: str = "drop"
    reset: str = "reset"
    migrate: str = "migrate"
    backup: str = "backup"


def main():
    """
    Provides all the launch implementations for the bot
    """

    parser = argparse.ArgumentParser(
        description='AFK arena Roster management Bot')

    parser.add_argument("mode", type=str, nargs="?",
                        default=LaunchChoices.run.value,
                        choices=LaunchChoices.v_list(),
                        help="Mode to launch Albedo Bot with")
    parser.add_argument("-v", "--verbose", help="Increase verbosity of output"
                        "from discord commands", action='count', default=0)

    args = parser.parse_args()
    args.mode = LaunchChoices(args.mode)

    config.VERBOSE = args.verbose
    loop = asyncio.new_event_loop()
    database = config.objects.database
    config.reload_loop(loop)

    if args.mode == LaunchChoices.run:
        with setup_logging():
            loop.run_until_complete(run_bot())
    elif args.mode == LaunchChoices.init:
        database.select_database(database_name="postgres")
        loop.run_until_complete(database.init_database(
            database_name=config.objects.database_config["name"],
            hero_data=config.objects.hero_data,
            portrait_folders=[IMAGE_PROCESSING_PORTRAITS], raise_error=False))
    elif args.mode == LaunchChoices.drop:
        loop.run_until_complete(database.drop_database(
            database_name=config.objects.database_config["name"]))
    elif args.mode == LaunchChoices.reset:
        database.select_database(
            database_name=config.objects.database_config["name"])
        loop.run_until_complete(database.reset_database(
            config.objects.hero_data,
            [IMAGE_PROCESSING_PORTRAITS]))
    elif args.mode == LaunchChoices.migrate:
        migration_execution_location = os.path.dirname(
            os.path.abspath(albedo_bot.database.migration.__file__))
        migration_commands: str = (
            "Step 1: \"alembic revision --autogenerate -m \'description of "
            "changes'\"\n"
            "Step2: Check the autogenerated file has all the proper database "
            "updates\n"
            "Step 3: \"alembic upgrade head\"")

        print(f"Go to {migration_execution_location} and run the "
              f"following instructions\n{migration_commands}\nor checkout the "
              "Readme.MD for more information")
    elif args.mode == LaunchChoices.backup:
        backup_location = os.path.join(
            os.path.dirname(__file__), os.path.pardir)
        backup_output = loop.run_until_complete(
            database.backup_database(backup_location))
        print(backup_output)


if __name__ == '__main__':
    main()
